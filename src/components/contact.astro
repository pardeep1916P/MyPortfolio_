<section id="contact" class="w-full py-12 border-t border-[#ffffff10]">
  <div class="max-w-5xl mx-auto">
    <h2 class="text-lg text-[var(--sec)] mb-2 shiny-sec">Let's talk</h2>
    <h3 class="text-4xl md:text-5xl font-medium text-[var(--white)] mb-6">
      Contact
    </h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div class="text-[var(--white-icon)]">
        <p class="mb-4">
          Have a question or a project in mind? Feel free to reach out.
        </p>
        <div class="flex items-center gap-2">
          <span>Location:</span>
          <span class="text-[var(--white)]">Machilipatnam, Andhra Pradesh, India</span>
        </div>
      </div>

      <div>
        <form
          id="contact-form"
          action={import.meta.env.PUBLIC_FORMSPREE_FORM}
          method="POST"
          class="flex flex-col gap-4"
        >
          <input
            type="text"
            name="from_name"
            placeholder="Name"
            required
            class="px-4 py-2 bg-[#1414149c] text-[var(--white)] border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)]"
          />
          <input
            type="email"
            name="email"
            placeholder="Email"
            required
            class="px-4 py-2 bg-[#1414149c] text-[var(--white)] border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)]"
          />
          <input type="hidden" name="_subject" value="New message from portfolio" />
          <textarea
            name="message"
            placeholder="Message"
            rows="6"
            required
            class="px-4 py-2 bg-[#1414149c] text-[var(--white)] border border-[var(--white-icon-tr)] rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--sec)] resize-none"
          ></textarea>
          <button
            type="submit"
            id="submit-btn"
            class="px-4 py-2 bg-[var(--white-icon-tr)] text-[var(--white)] rounded-lg opacity-60 transition-all duration-300 border border-[var(--white-icon-tr)] hover:opacity-100 hover:bg-[var(--white-icon-tr)]"
          >
            Submit
          </button>
        </form>
        <div
          id="form-message"
          class="hidden justify-center items-center mt-4 text-[var(--white)] text-lg"
        >
          ✅ Thank you for your message!
        </div>
      </div>
    </div>
  </div>
</section>

<script type="module" is:inline>
  const form = document.getElementById("contact-form");
  const formMessage = document.getElementById("form-message");
  const submitBtn = document.getElementById("submit-btn");
  const inputs = form.querySelectorAll("input, textarea");

  // Function to check if all required fields are filled
  function checkFormValidity() {
    const nameInput = form.querySelector('input[name="from_name"]');
    const emailInput = form.querySelector('input[name="email"]');
    const messageInput = form.querySelector('textarea[name="message"]');
    
    const isFormValid = nameInput.value.trim() !== "" && 
                       emailInput.value.trim() !== "" && 
                       messageInput.value.trim() !== "";
    
    if (isFormValid) {
      submitBtn.classList.remove("opacity-60", "bg-[var(--white-icon-tr)]");
      submitBtn.classList.add("opacity-100", "bg-[var(--sec)]", "hover:bg-[var(--sec)]", "hover:opacity-90");
    } else {
      submitBtn.classList.remove("opacity-100", "bg-[var(--sec)]", "hover:bg-[var(--sec)]", "hover:opacity-90");
      submitBtn.classList.add("opacity-60", "bg-[var(--white-icon-tr)]");
    }
  }

  // Add event listeners to all form inputs
  inputs.forEach(input => {
    input.addEventListener("input", checkFormValidity);
    input.addEventListener("blur", checkFormValidity);
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    try {
      const response = await fetch(form.action, {
        method: "POST",
        body: formData,
        headers: { Accept: "application/json" },
      });
      if (response.ok) {
        form.reset();
        form.style.display = "none";
        formMessage.textContent = "✅ Thank you! Your message has been sent.";
        formMessage.classList.remove("hidden");
        // Reset button color after form submission
        submitBtn.classList.remove("opacity-100", "bg-[var(--sec)]", "hover:bg-[var(--sec)]", "hover:opacity-90");
        submitBtn.classList.add("opacity-60", "bg-[var(--white-icon-tr)]");
      } else {
        formMessage.textContent = "⚠️ There was a problem sending your message. Please try again later.";
        formMessage.classList.remove("hidden");
      }
    } catch (error) {
      formMessage.textContent = "⚠️ Network error. Please try again later.";
      formMessage.classList.remove("hidden");
    }
  });
</script>
